{"ast":null,"code":"var _jsxFileName = \"/Users/samaysalunke/Documents/everything-hobby/kwabey-fab-check/src/contexts/AuthContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useEffect, useState } from 'react';\n// import { supabase } from '../services/supabase';\nimport { getUserRole } from '../services/auth.service';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(undefined);\n// Mock user for testing\nconst createMockUser = email => ({\n  id: 'mock-user-id',\n  email,\n  created_at: new Date().toISOString(),\n  updated_at: new Date().toISOString(),\n  aud: 'authenticated',\n  app_metadata: {},\n  user_metadata: {},\n  role: 'authenticated',\n  email_confirmed_at: new Date().toISOString(),\n  phone_confirmed_at: null,\n  confirmation_sent_at: null,\n  recovery_sent_at: null,\n  email_change_sent_at: null,\n  new_email: null,\n  invited_at: null,\n  action_link: null,\n  phone: null,\n  last_sign_in_at: new Date().toISOString(),\n  identities: [],\n  factors: []\n});\nexport function AuthProvider({\n  children\n}) {\n  _s();\n  const [user, setUser] = useState(null);\n  const [role, setRole] = useState(null);\n  const [loading, setLoading] = useState(false); // Set to false for immediate testing\n\n  useEffect(() => {\n    // For testing purposes, check if there's a stored mock user\n    const storedEmail = localStorage.getItem('mockUserEmail');\n    if (storedEmail) {\n      const mockUser = createMockUser(storedEmail);\n      setUser(mockUser);\n      setRole(getUserRole(storedEmail));\n    }\n    setLoading(false);\n  }, []);\n  const signIn = async (email, password) => {\n    // Mock authentication - accept any email with password \"password123\"\n    if (password === 'password123') {\n      const mockUser = createMockUser(email);\n      setUser(mockUser);\n      setRole(getUserRole(email));\n      localStorage.setItem('mockUserEmail', email);\n      return {\n        error: null\n      };\n    } else {\n      return {\n        error: {\n          message: 'Invalid credentials'\n        }\n      };\n    }\n  };\n  const signOut = async () => {\n    setUser(null);\n    setRole(null);\n    localStorage.removeItem('mockUserEmail');\n  };\n  const hasRole = roles => {\n    return role ? roles.includes(role) : false;\n  };\n  const value = {\n    user,\n    role,\n    loading,\n    signIn,\n    signOut,\n    hasRole\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 10\n  }, this);\n}\n_s(AuthProvider, \"JwsKTN6DgA5RrjNIpG9J/4DZu40=\");\n_c = AuthProvider;\nexport function useAuth() {\n  _s2();\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n}\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport { AuthContext };\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","getUserRole","jsxDEV","_jsxDEV","AuthContext","undefined","createMockUser","email","id","created_at","Date","toISOString","updated_at","aud","app_metadata","user_metadata","role","email_confirmed_at","phone_confirmed_at","confirmation_sent_at","recovery_sent_at","email_change_sent_at","new_email","invited_at","action_link","phone","last_sign_in_at","identities","factors","AuthProvider","children","_s","user","setUser","setRole","loading","setLoading","storedEmail","localStorage","getItem","mockUser","signIn","password","setItem","error","message","signOut","removeItem","hasRole","roles","includes","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","Error","$RefreshReg$"],"sources":["/Users/samaysalunke/Documents/everything-hobby/kwabey-fab-check/src/contexts/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState, ReactNode } from 'react';\nimport { User } from '@supabase/supabase-js';\n// import { supabase } from '../services/supabase';\nimport { getUserRole } from '../services/auth.service';\n\ninterface AuthContextType {\n  user: User | null;\n  role: string | null;\n  loading: boolean;\n  signIn: (email: string, password: string) => Promise<{ error?: any }>;\n  signOut: () => Promise<void>;\n  hasRole: (roles: string[]) => boolean;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\ninterface AuthProviderProps {\n  children: ReactNode;\n}\n\n// Mock user for testing\nconst createMockUser = (email: string): User => ({\n  id: 'mock-user-id',\n  email,\n  created_at: new Date().toISOString(),\n  updated_at: new Date().toISOString(),\n  aud: 'authenticated',\n  app_metadata: {},\n  user_metadata: {},\n  role: 'authenticated',\n  email_confirmed_at: new Date().toISOString(),\n  phone_confirmed_at: null,\n  confirmation_sent_at: null,\n  recovery_sent_at: null,\n  email_change_sent_at: null,\n  new_email: null,\n  invited_at: null,\n  action_link: null,\n  phone: null,\n  last_sign_in_at: new Date().toISOString(),\n  identities: [],\n  factors: []\n});\n\nexport function AuthProvider({ children }: AuthProviderProps) {\n  const [user, setUser] = useState<User | null>(null);\n  const [role, setRole] = useState<string | null>(null);\n  const [loading, setLoading] = useState(false); // Set to false for immediate testing\n\n  useEffect(() => {\n    // For testing purposes, check if there's a stored mock user\n    const storedEmail = localStorage.getItem('mockUserEmail');\n    if (storedEmail) {\n      const mockUser = createMockUser(storedEmail);\n      setUser(mockUser);\n      setRole(getUserRole(storedEmail));\n    }\n    setLoading(false);\n  }, []);\n\n  const signIn = async (email: string, password: string) => {\n    // Mock authentication - accept any email with password \"password123\"\n    if (password === 'password123') {\n      const mockUser = createMockUser(email);\n      setUser(mockUser);\n      setRole(getUserRole(email));\n      localStorage.setItem('mockUserEmail', email);\n      return { error: null };\n    } else {\n      return { error: { message: 'Invalid credentials' } };\n    }\n  };\n\n  const signOut = async () => {\n    setUser(null);\n    setRole(null);\n    localStorage.removeItem('mockUserEmail');\n  };\n\n  const hasRole = (roles: string[]) => {\n    return role ? roles.includes(role) : false;\n  };\n\n  const value = {\n    user,\n    role,\n    loading,\n    signIn,\n    signOut,\n    hasRole,\n  };\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n}\n\nexport { AuthContext };\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,SAAS,EAAEC,QAAQ,QAAmB,OAAO;AAExF;AACA,SAASC,WAAW,QAAQ,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAWvD,MAAMC,WAAW,gBAAGP,aAAa,CAA8BQ,SAAS,CAAC;AAMzE;AACA,MAAMC,cAAc,GAAIC,KAAa,KAAY;EAC/CC,EAAE,EAAE,cAAc;EAClBD,KAAK;EACLE,UAAU,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;EACpCC,UAAU,EAAE,IAAIF,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;EACpCE,GAAG,EAAE,eAAe;EACpBC,YAAY,EAAE,CAAC,CAAC;EAChBC,aAAa,EAAE,CAAC,CAAC;EACjBC,IAAI,EAAE,eAAe;EACrBC,kBAAkB,EAAE,IAAIP,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;EAC5CO,kBAAkB,EAAE,IAAI;EACxBC,oBAAoB,EAAE,IAAI;EAC1BC,gBAAgB,EAAE,IAAI;EACtBC,oBAAoB,EAAE,IAAI;EAC1BC,SAAS,EAAE,IAAI;EACfC,UAAU,EAAE,IAAI;EAChBC,WAAW,EAAE,IAAI;EACjBC,KAAK,EAAE,IAAI;EACXC,eAAe,EAAE,IAAIhB,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;EACzCgB,UAAU,EAAE,EAAE;EACdC,OAAO,EAAE;AACX,CAAC,CAAC;AAEF,OAAO,SAASC,YAAYA,CAAC;EAAEC;AAA4B,CAAC,EAAE;EAAAC,EAAA;EAC5D,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGjC,QAAQ,CAAc,IAAI,CAAC;EACnD,MAAM,CAACgB,IAAI,EAAEkB,OAAO,CAAC,GAAGlC,QAAQ,CAAgB,IAAI,CAAC;EACrD,MAAM,CAACmC,OAAO,EAAEC,UAAU,CAAC,GAAGpC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;;EAE/CD,SAAS,CAAC,MAAM;IACd;IACA,MAAMsC,WAAW,GAAGC,YAAY,CAACC,OAAO,CAAC,eAAe,CAAC;IACzD,IAAIF,WAAW,EAAE;MACf,MAAMG,QAAQ,GAAGlC,cAAc,CAAC+B,WAAW,CAAC;MAC5CJ,OAAO,CAACO,QAAQ,CAAC;MACjBN,OAAO,CAACjC,WAAW,CAACoC,WAAW,CAAC,CAAC;IACnC;IACAD,UAAU,CAAC,KAAK,CAAC;EACnB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMK,MAAM,GAAG,MAAAA,CAAOlC,KAAa,EAAEmC,QAAgB,KAAK;IACxD;IACA,IAAIA,QAAQ,KAAK,aAAa,EAAE;MAC9B,MAAMF,QAAQ,GAAGlC,cAAc,CAACC,KAAK,CAAC;MACtC0B,OAAO,CAACO,QAAQ,CAAC;MACjBN,OAAO,CAACjC,WAAW,CAACM,KAAK,CAAC,CAAC;MAC3B+B,YAAY,CAACK,OAAO,CAAC,eAAe,EAAEpC,KAAK,CAAC;MAC5C,OAAO;QAAEqC,KAAK,EAAE;MAAK,CAAC;IACxB,CAAC,MAAM;MACL,OAAO;QAAEA,KAAK,EAAE;UAAEC,OAAO,EAAE;QAAsB;MAAE,CAAC;IACtD;EACF,CAAC;EAED,MAAMC,OAAO,GAAG,MAAAA,CAAA,KAAY;IAC1Bb,OAAO,CAAC,IAAI,CAAC;IACbC,OAAO,CAAC,IAAI,CAAC;IACbI,YAAY,CAACS,UAAU,CAAC,eAAe,CAAC;EAC1C,CAAC;EAED,MAAMC,OAAO,GAAIC,KAAe,IAAK;IACnC,OAAOjC,IAAI,GAAGiC,KAAK,CAACC,QAAQ,CAAClC,IAAI,CAAC,GAAG,KAAK;EAC5C,CAAC;EAED,MAAMmC,KAAK,GAAG;IACZnB,IAAI;IACJhB,IAAI;IACJmB,OAAO;IACPM,MAAM;IACNK,OAAO;IACPE;EACF,CAAC;EAED,oBAAO7C,OAAA,CAACC,WAAW,CAACgD,QAAQ;IAACD,KAAK,EAAEA,KAAM;IAAArB,QAAA,EAAEA;EAAQ;IAAAuB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAuB,CAAC;AAC9E;AAACzB,EAAA,CAjDeF,YAAY;AAAA4B,EAAA,GAAZ5B,YAAY;AAmD5B,OAAO,SAAS6B,OAAOA,CAAA,EAAG;EAAAC,GAAA;EACxB,MAAMC,OAAO,GAAG9D,UAAU,CAACM,WAAW,CAAC;EACvC,IAAIwD,OAAO,KAAKvD,SAAS,EAAE;IACzB,MAAM,IAAIwD,KAAK,CAAC,6CAA6C,CAAC;EAChE;EACA,OAAOD,OAAO;AAChB;AAACD,GAAA,CANeD,OAAO;AAQvB,SAAStD,WAAW;AAAG,IAAAqD,EAAA;AAAAK,YAAA,CAAAL,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}