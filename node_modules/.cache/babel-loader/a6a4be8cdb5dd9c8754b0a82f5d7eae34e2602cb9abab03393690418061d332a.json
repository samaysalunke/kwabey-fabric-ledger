{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useAuth } from '../contexts/AuthContext';\n\n// Define permissions as simple strings\nexport const PERMISSIONS = {\n  // Fabric Inward\n  FABRIC_INWARD_CREATE: 'fabric_inward:create',\n  FABRIC_INWARD_READ: 'fabric_inward:read',\n  FABRIC_INWARD_UPDATE: 'fabric_inward:update',\n  FABRIC_INWARD_DELETE: 'fabric_inward:delete',\n  // Quality Parameters\n  QUALITY_PARAMS_CREATE: 'quality_params:create',\n  QUALITY_PARAMS_READ: 'quality_params:read',\n  QUALITY_PARAMS_UPDATE: 'quality_params:update',\n  // Quantity Approval\n  QUANTITY_APPROVAL_CREATE: 'quantity_approval:create',\n  QUANTITY_APPROVAL_READ: 'quantity_approval:read',\n  QUANTITY_APPROVAL_APPROVE: 'quantity_approval:approve',\n  QUANTITY_APPROVAL_REJECT: 'quantity_approval:reject',\n  // Reports\n  REPORTS_VIEW_ALL: 'reports:view_all',\n  REPORTS_VIEW_OWN: 'reports:view_own',\n  REPORTS_EXPORT: 'reports:export',\n  // System Administration\n  SYSTEM_SETTINGS: 'system:settings',\n  USER_MANAGEMENT: 'user:management'\n};\n\n// Define role permissions mapping\nconst ROLE_PERMISSIONS = {\n  INWARD_CLERK: [PERMISSIONS.FABRIC_INWARD_CREATE, PERMISSIONS.FABRIC_INWARD_READ, PERMISSIONS.FABRIC_INWARD_UPDATE, PERMISSIONS.REPORTS_VIEW_OWN],\n  QUALITY_CHECKER: [PERMISSIONS.FABRIC_INWARD_READ, PERMISSIONS.QUALITY_PARAMS_CREATE, PERMISSIONS.QUALITY_PARAMS_READ, PERMISSIONS.QUALITY_PARAMS_UPDATE, PERMISSIONS.REPORTS_VIEW_OWN],\n  APPROVER: [PERMISSIONS.FABRIC_INWARD_READ, PERMISSIONS.QUALITY_PARAMS_READ, PERMISSIONS.QUANTITY_APPROVAL_CREATE, PERMISSIONS.QUANTITY_APPROVAL_READ, PERMISSIONS.QUANTITY_APPROVAL_APPROVE, PERMISSIONS.QUANTITY_APPROVAL_REJECT, PERMISSIONS.REPORTS_VIEW_OWN],\n  SUPERADMIN: [\n  // All permissions\n  PERMISSIONS.FABRIC_INWARD_CREATE, PERMISSIONS.FABRIC_INWARD_READ, PERMISSIONS.FABRIC_INWARD_UPDATE, PERMISSIONS.FABRIC_INWARD_DELETE, PERMISSIONS.QUALITY_PARAMS_CREATE, PERMISSIONS.QUALITY_PARAMS_READ, PERMISSIONS.QUALITY_PARAMS_UPDATE, PERMISSIONS.QUANTITY_APPROVAL_CREATE, PERMISSIONS.QUANTITY_APPROVAL_READ, PERMISSIONS.QUANTITY_APPROVAL_APPROVE, PERMISSIONS.QUANTITY_APPROVAL_REJECT, PERMISSIONS.REPORTS_VIEW_ALL, PERMISSIONS.REPORTS_VIEW_OWN, PERMISSIONS.REPORTS_EXPORT, PERMISSIONS.SYSTEM_SETTINGS, PERMISSIONS.USER_MANAGEMENT]\n};\n\n// Define data access levels\nexport const DATA_ACCESS_LEVELS = {\n  OWN_ONLY: 'own_only',\n  DEPARTMENT: 'department',\n  ALL: 'all'\n};\nconst ROLE_DATA_ACCESS = {\n  INWARD_CLERK: DATA_ACCESS_LEVELS.OWN_ONLY,\n  QUALITY_CHECKER: DATA_ACCESS_LEVELS.OWN_ONLY,\n  APPROVER: DATA_ACCESS_LEVELS.DEPARTMENT,\n  SUPERADMIN: DATA_ACCESS_LEVELS.ALL\n};\nexport function useRBAC() {\n  _s();\n  const {\n    user,\n    role\n  } = useAuth();\n\n  /**\n   * Check if current user has a specific permission\n   */\n  const hasPermission = permission => {\n    if (!role) return false;\n    const permissions = ROLE_PERMISSIONS[role] || [];\n    return permissions.includes(permission);\n  };\n\n  /**\n   * Check if current user can access specific data\n   */\n  const canAccessData = (dataOwnerId, dataDepartment) => {\n    if (!role || !user) return false;\n    const accessLevel = ROLE_DATA_ACCESS[role];\n    switch (accessLevel) {\n      case DATA_ACCESS_LEVELS.OWN_ONLY:\n        return dataOwnerId === user.id;\n      case DATA_ACCESS_LEVELS.DEPARTMENT:\n        // For now, approvers can see all data in their workflow\n        return true;\n      case DATA_ACCESS_LEVELS.ALL:\n        return true;\n      default:\n        return false;\n    }\n  };\n\n  /**\n   * Check if user can modify a fabric entry based on status and ownership\n   */\n  const canModifyFabricEntry = (entryStatus, entryOwnerId) => {\n    if (!role || !user) return false;\n\n    // Superadmin can modify anything\n    if (role === 'SUPERADMIN') return true;\n    switch (role) {\n      case 'INWARD_CLERK':\n        // Can only modify their own entries that are still pending quality\n        return entryOwnerId === user.id && entryStatus === 'PENDING_QUALITY';\n      case 'QUALITY_CHECKER':\n        // Can modify entries that are pending quality check\n        return entryStatus === 'PENDING_QUALITY';\n      case 'APPROVER':\n        // Can modify entries that have passed quality check\n        return entryStatus === 'QUALITY_CHECKED';\n      default:\n        return false;\n    }\n  };\n\n  /**\n   * Get allowed status transitions for current role\n   */\n  const getAllowedStatusTransitions = currentStatus => {\n    if (!role) return [];\n    switch (role) {\n      case 'INWARD_CLERK':\n        if (currentStatus === 'PENDING_QUALITY') {\n          return ['PENDING_QUALITY']; // Can only keep it pending\n        }\n        return [];\n      case 'QUALITY_CHECKER':\n        if (currentStatus === 'PENDING_QUALITY') {\n          return ['QUALITY_CHECKED', 'ON_HOLD'];\n        }\n        return [];\n      case 'APPROVER':\n        if (currentStatus === 'QUALITY_CHECKED') {\n          return ['APPROVED', 'ON_HOLD'];\n        }\n        return [];\n      case 'SUPERADMIN':\n        return ['PENDING_QUALITY', 'QUALITY_CHECKED', 'APPROVED', 'ON_HOLD'];\n      default:\n        return [];\n    }\n  };\n\n  /**\n   * Check if user can perform specific actions\n   */\n  const canCreateFabricEntry = () => hasPermission(PERMISSIONS.FABRIC_INWARD_CREATE);\n  const canUpdateFabricEntry = () => hasPermission(PERMISSIONS.FABRIC_INWARD_UPDATE);\n  const canDeleteFabricEntry = () => hasPermission(PERMISSIONS.FABRIC_INWARD_DELETE);\n  const canCreateQualityParams = () => hasPermission(PERMISSIONS.QUALITY_PARAMS_CREATE);\n  const canUpdateQualityParams = () => hasPermission(PERMISSIONS.QUALITY_PARAMS_UPDATE);\n  const canApproveQuantity = () => hasPermission(PERMISSIONS.QUANTITY_APPROVAL_APPROVE);\n  const canRejectQuantity = () => hasPermission(PERMISSIONS.QUANTITY_APPROVAL_REJECT);\n  const canViewAllReports = () => hasPermission(PERMISSIONS.REPORTS_VIEW_ALL);\n  const canExportReports = () => hasPermission(PERMISSIONS.REPORTS_EXPORT);\n  const canManageUsers = () => hasPermission(PERMISSIONS.USER_MANAGEMENT);\n  const canManageSettings = () => hasPermission(PERMISSIONS.SYSTEM_SETTINGS);\n  return {\n    // Core permission checking\n    hasPermission,\n    canAccessData,\n    canModifyFabricEntry,\n    getAllowedStatusTransitions,\n    // Specific action permissions\n    canCreateFabricEntry,\n    canUpdateFabricEntry,\n    canDeleteFabricEntry,\n    canCreateQualityParams,\n    canUpdateQualityParams,\n    canApproveQuantity,\n    canRejectQuantity,\n    canViewAllReports,\n    canExportReports,\n    canManageUsers,\n    canManageSettings,\n    // User info\n    currentRole: role,\n    currentUser: user\n  };\n}\n_s(useRBAC, \"qEAfGJDi+Yo1kGbA2Iua0CeR+YQ=\", false, function () {\n  return [useAuth];\n});","map":{"version":3,"names":["useAuth","PERMISSIONS","FABRIC_INWARD_CREATE","FABRIC_INWARD_READ","FABRIC_INWARD_UPDATE","FABRIC_INWARD_DELETE","QUALITY_PARAMS_CREATE","QUALITY_PARAMS_READ","QUALITY_PARAMS_UPDATE","QUANTITY_APPROVAL_CREATE","QUANTITY_APPROVAL_READ","QUANTITY_APPROVAL_APPROVE","QUANTITY_APPROVAL_REJECT","REPORTS_VIEW_ALL","REPORTS_VIEW_OWN","REPORTS_EXPORT","SYSTEM_SETTINGS","USER_MANAGEMENT","ROLE_PERMISSIONS","INWARD_CLERK","QUALITY_CHECKER","APPROVER","SUPERADMIN","DATA_ACCESS_LEVELS","OWN_ONLY","DEPARTMENT","ALL","ROLE_DATA_ACCESS","useRBAC","_s","user","role","hasPermission","permission","permissions","includes","canAccessData","dataOwnerId","dataDepartment","accessLevel","id","canModifyFabricEntry","entryStatus","entryOwnerId","getAllowedStatusTransitions","currentStatus","canCreateFabricEntry","canUpdateFabricEntry","canDeleteFabricEntry","canCreateQualityParams","canUpdateQualityParams","canApproveQuantity","canRejectQuantity","canViewAllReports","canExportReports","canManageUsers","canManageSettings","currentRole","currentUser"],"sources":["/Users/samaysalunke/Documents/everything-hobby/kwabey-fab-check/src/hooks/useRBAC.ts"],"sourcesContent":["import { useAuth } from '../contexts/AuthContext';\n\n// Define permissions as simple strings\nexport const PERMISSIONS = {\n  // Fabric Inward\n  FABRIC_INWARD_CREATE: 'fabric_inward:create',\n  FABRIC_INWARD_READ: 'fabric_inward:read',\n  FABRIC_INWARD_UPDATE: 'fabric_inward:update',\n  FABRIC_INWARD_DELETE: 'fabric_inward:delete',\n  \n  // Quality Parameters\n  QUALITY_PARAMS_CREATE: 'quality_params:create',\n  QUALITY_PARAMS_READ: 'quality_params:read',\n  QUALITY_PARAMS_UPDATE: 'quality_params:update',\n  \n  // Quantity Approval\n  QUANTITY_APPROVAL_CREATE: 'quantity_approval:create',\n  QUANTITY_APPROVAL_READ: 'quantity_approval:read',\n  QUANTITY_APPROVAL_APPROVE: 'quantity_approval:approve',\n  QUANTITY_APPROVAL_REJECT: 'quantity_approval:reject',\n  \n  // Reports\n  REPORTS_VIEW_ALL: 'reports:view_all',\n  REPORTS_VIEW_OWN: 'reports:view_own',\n  REPORTS_EXPORT: 'reports:export',\n  \n  // System Administration\n  SYSTEM_SETTINGS: 'system:settings',\n  USER_MANAGEMENT: 'user:management',\n} as const;\n\n// Define role permissions mapping\nconst ROLE_PERMISSIONS: Record<string, string[]> = {\n  INWARD_CLERK: [\n    PERMISSIONS.FABRIC_INWARD_CREATE,\n    PERMISSIONS.FABRIC_INWARD_READ,\n    PERMISSIONS.FABRIC_INWARD_UPDATE,\n    PERMISSIONS.REPORTS_VIEW_OWN,\n  ],\n  \n  QUALITY_CHECKER: [\n    PERMISSIONS.FABRIC_INWARD_READ,\n    PERMISSIONS.QUALITY_PARAMS_CREATE,\n    PERMISSIONS.QUALITY_PARAMS_READ,\n    PERMISSIONS.QUALITY_PARAMS_UPDATE,\n    PERMISSIONS.REPORTS_VIEW_OWN,\n  ],\n  \n  APPROVER: [\n    PERMISSIONS.FABRIC_INWARD_READ,\n    PERMISSIONS.QUALITY_PARAMS_READ,\n    PERMISSIONS.QUANTITY_APPROVAL_CREATE,\n    PERMISSIONS.QUANTITY_APPROVAL_READ,\n    PERMISSIONS.QUANTITY_APPROVAL_APPROVE,\n    PERMISSIONS.QUANTITY_APPROVAL_REJECT,\n    PERMISSIONS.REPORTS_VIEW_OWN,\n  ],\n  \n  SUPERADMIN: [\n    // All permissions\n    PERMISSIONS.FABRIC_INWARD_CREATE,\n    PERMISSIONS.FABRIC_INWARD_READ,\n    PERMISSIONS.FABRIC_INWARD_UPDATE,\n    PERMISSIONS.FABRIC_INWARD_DELETE,\n    PERMISSIONS.QUALITY_PARAMS_CREATE,\n    PERMISSIONS.QUALITY_PARAMS_READ,\n    PERMISSIONS.QUALITY_PARAMS_UPDATE,\n    PERMISSIONS.QUANTITY_APPROVAL_CREATE,\n    PERMISSIONS.QUANTITY_APPROVAL_READ,\n    PERMISSIONS.QUANTITY_APPROVAL_APPROVE,\n    PERMISSIONS.QUANTITY_APPROVAL_REJECT,\n    PERMISSIONS.REPORTS_VIEW_ALL,\n    PERMISSIONS.REPORTS_VIEW_OWN,\n    PERMISSIONS.REPORTS_EXPORT,\n    PERMISSIONS.SYSTEM_SETTINGS,\n    PERMISSIONS.USER_MANAGEMENT,\n  ],\n};\n\n// Define data access levels\nexport const DATA_ACCESS_LEVELS = {\n  OWN_ONLY: 'own_only',\n  DEPARTMENT: 'department',\n  ALL: 'all',\n} as const;\n\nconst ROLE_DATA_ACCESS: Record<string, string> = {\n  INWARD_CLERK: DATA_ACCESS_LEVELS.OWN_ONLY,\n  QUALITY_CHECKER: DATA_ACCESS_LEVELS.OWN_ONLY,\n  APPROVER: DATA_ACCESS_LEVELS.DEPARTMENT,\n  SUPERADMIN: DATA_ACCESS_LEVELS.ALL,\n};\n\nexport function useRBAC() {\n  const { user, role } = useAuth();\n\n  /**\n   * Check if current user has a specific permission\n   */\n  const hasPermission = (permission: string): boolean => {\n    if (!role) return false;\n    const permissions = ROLE_PERMISSIONS[role] || [];\n    return permissions.includes(permission);\n  };\n\n  /**\n   * Check if current user can access specific data\n   */\n  const canAccessData = (dataOwnerId: string, dataDepartment?: string): boolean => {\n    if (!role || !user) return false;\n\n    const accessLevel = ROLE_DATA_ACCESS[role];\n    \n    switch (accessLevel) {\n      case DATA_ACCESS_LEVELS.OWN_ONLY:\n        return dataOwnerId === user.id;\n      \n      case DATA_ACCESS_LEVELS.DEPARTMENT:\n        // For now, approvers can see all data in their workflow\n        return true;\n      \n      case DATA_ACCESS_LEVELS.ALL:\n        return true;\n      \n      default:\n        return false;\n    }\n  };\n\n  /**\n   * Check if user can modify a fabric entry based on status and ownership\n   */\n  const canModifyFabricEntry = (entryStatus: string, entryOwnerId: string): boolean => {\n    if (!role || !user) return false;\n\n    // Superadmin can modify anything\n    if (role === 'SUPERADMIN') return true;\n\n    switch (role) {\n      case 'INWARD_CLERK':\n        // Can only modify their own entries that are still pending quality\n        return entryOwnerId === user.id && entryStatus === 'PENDING_QUALITY';\n      \n      case 'QUALITY_CHECKER':\n        // Can modify entries that are pending quality check\n        return entryStatus === 'PENDING_QUALITY';\n      \n      case 'APPROVER':\n        // Can modify entries that have passed quality check\n        return entryStatus === 'QUALITY_CHECKED';\n      \n      default:\n        return false;\n    }\n  };\n\n  /**\n   * Get allowed status transitions for current role\n   */\n  const getAllowedStatusTransitions = (currentStatus: string): string[] => {\n    if (!role) return [];\n\n    switch (role) {\n      case 'INWARD_CLERK':\n        if (currentStatus === 'PENDING_QUALITY') {\n          return ['PENDING_QUALITY']; // Can only keep it pending\n        }\n        return [];\n\n      case 'QUALITY_CHECKER':\n        if (currentStatus === 'PENDING_QUALITY') {\n          return ['QUALITY_CHECKED', 'ON_HOLD'];\n        }\n        return [];\n\n      case 'APPROVER':\n        if (currentStatus === 'QUALITY_CHECKED') {\n          return ['APPROVED', 'ON_HOLD'];\n        }\n        return [];\n\n      case 'SUPERADMIN':\n        return ['PENDING_QUALITY', 'QUALITY_CHECKED', 'APPROVED', 'ON_HOLD'];\n\n      default:\n        return [];\n    }\n  };\n\n  /**\n   * Check if user can perform specific actions\n   */\n  const canCreateFabricEntry = () => hasPermission(PERMISSIONS.FABRIC_INWARD_CREATE);\n  const canUpdateFabricEntry = () => hasPermission(PERMISSIONS.FABRIC_INWARD_UPDATE);\n  const canDeleteFabricEntry = () => hasPermission(PERMISSIONS.FABRIC_INWARD_DELETE);\n  \n  const canCreateQualityParams = () => hasPermission(PERMISSIONS.QUALITY_PARAMS_CREATE);\n  const canUpdateQualityParams = () => hasPermission(PERMISSIONS.QUALITY_PARAMS_UPDATE);\n  \n  const canApproveQuantity = () => hasPermission(PERMISSIONS.QUANTITY_APPROVAL_APPROVE);\n  const canRejectQuantity = () => hasPermission(PERMISSIONS.QUANTITY_APPROVAL_REJECT);\n  \n  const canViewAllReports = () => hasPermission(PERMISSIONS.REPORTS_VIEW_ALL);\n  const canExportReports = () => hasPermission(PERMISSIONS.REPORTS_EXPORT);\n  \n  const canManageUsers = () => hasPermission(PERMISSIONS.USER_MANAGEMENT);\n  const canManageSettings = () => hasPermission(PERMISSIONS.SYSTEM_SETTINGS);\n\n  return {\n    // Core permission checking\n    hasPermission,\n    canAccessData,\n    canModifyFabricEntry,\n    getAllowedStatusTransitions,\n    \n    // Specific action permissions\n    canCreateFabricEntry,\n    canUpdateFabricEntry,\n    canDeleteFabricEntry,\n    canCreateQualityParams,\n    canUpdateQualityParams,\n    canApproveQuantity,\n    canRejectQuantity,\n    canViewAllReports,\n    canExportReports,\n    canManageUsers,\n    canManageSettings,\n    \n    // User info\n    currentRole: role,\n    currentUser: user,\n  };\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}