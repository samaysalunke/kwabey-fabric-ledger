{"ast":null,"code":"var _jsxFileName = \"/Users/samaysalunke/Documents/everything-hobby/kwabey-fab-check/src/contexts/AppContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AppContext = /*#__PURE__*/createContext(undefined);\nexport function AppProvider({\n  children\n}) {\n  _s();\n  const [notifications, setNotifications] = useState([]);\n  const [globalLoading, setGlobalLoading] = useState(false);\n  const addNotification = notification => {\n    const id = Math.random().toString(36).substr(2, 9);\n    const newNotification = {\n      ...notification,\n      id\n    };\n    setNotifications(prev => [...prev, newNotification]);\n\n    // Auto-remove notification after duration (default 5 seconds)\n    const duration = notification.duration || 5000;\n    setTimeout(() => {\n      removeNotification(id);\n    }, duration);\n  };\n  const removeNotification = id => {\n    setNotifications(prev => prev.filter(notification => notification.id !== id));\n  };\n  const value = {\n    notifications,\n    addNotification,\n    removeNotification,\n    globalLoading,\n    setGlobalLoading\n  };\n  return /*#__PURE__*/_jsxDEV(AppContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 10\n  }, this);\n}\n_s(AppProvider, \"BCW4JzMfPcxQ5dj8T6ci0Vd2nu0=\");\n_c = AppProvider;\nexport function useApp() {\n  _s2();\n  const context = useContext(AppContext);\n  if (context === undefined) {\n    throw new Error('useApp must be used within an AppProvider');\n  }\n  return context;\n}\n_s2(useApp, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport { AppContext };\nvar _c;\n$RefreshReg$(_c, \"AppProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","jsxDEV","_jsxDEV","AppContext","undefined","AppProvider","children","_s","notifications","setNotifications","globalLoading","setGlobalLoading","addNotification","notification","id","Math","random","toString","substr","newNotification","prev","duration","setTimeout","removeNotification","filter","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useApp","_s2","context","Error","$RefreshReg$"],"sources":["/Users/samaysalunke/Documents/everything-hobby/kwabey-fab-check/src/contexts/AppContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, ReactNode } from 'react';\n\ninterface Notification {\n  id: string;\n  type: 'success' | 'error' | 'warning' | 'info';\n  message: string;\n  duration?: number;\n}\n\ninterface AppContextType {\n  notifications: Notification[];\n  addNotification: (notification: Omit<Notification, 'id'>) => void;\n  removeNotification: (id: string) => void;\n  globalLoading: boolean;\n  setGlobalLoading: (loading: boolean) => void;\n}\n\nconst AppContext = createContext<AppContextType | undefined>(undefined);\n\ninterface AppProviderProps {\n  children: ReactNode;\n}\n\nexport function AppProvider({ children }: AppProviderProps) {\n  const [notifications, setNotifications] = useState<Notification[]>([]);\n  const [globalLoading, setGlobalLoading] = useState(false);\n\n  const addNotification = (notification: Omit<Notification, 'id'>) => {\n    const id = Math.random().toString(36).substr(2, 9);\n    const newNotification = { ...notification, id };\n    \n    setNotifications(prev => [...prev, newNotification]);\n\n    // Auto-remove notification after duration (default 5 seconds)\n    const duration = notification.duration || 5000;\n    setTimeout(() => {\n      removeNotification(id);\n    }, duration);\n  };\n\n  const removeNotification = (id: string) => {\n    setNotifications(prev => prev.filter(notification => notification.id !== id));\n  };\n\n  const value = {\n    notifications,\n    addNotification,\n    removeNotification,\n    globalLoading,\n    setGlobalLoading,\n  };\n\n  return <AppContext.Provider value={value}>{children}</AppContext.Provider>;\n}\n\nexport function useApp() {\n  const context = useContext(AppContext);\n  if (context === undefined) {\n    throw new Error('useApp must be used within an AppProvider');\n  }\n  return context;\n}\n\nexport { AppContext };"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,QAAmB,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAiB9E,MAAMC,UAAU,gBAAGL,aAAa,CAA6BM,SAAS,CAAC;AAMvE,OAAO,SAASC,WAAWA,CAAC;EAAEC;AAA2B,CAAC,EAAE;EAAAC,EAAA;EAC1D,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGT,QAAQ,CAAiB,EAAE,CAAC;EACtE,MAAM,CAACU,aAAa,EAAEC,gBAAgB,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;EAEzD,MAAMY,eAAe,GAAIC,YAAsC,IAAK;IAClE,MAAMC,EAAE,GAAGC,IAAI,CAACC,MAAM,CAAC,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC,CAACC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC;IAClD,MAAMC,eAAe,GAAG;MAAE,GAAGN,YAAY;MAAEC;IAAG,CAAC;IAE/CL,gBAAgB,CAACW,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAED,eAAe,CAAC,CAAC;;IAEpD;IACA,MAAME,QAAQ,GAAGR,YAAY,CAACQ,QAAQ,IAAI,IAAI;IAC9CC,UAAU,CAAC,MAAM;MACfC,kBAAkB,CAACT,EAAE,CAAC;IACxB,CAAC,EAAEO,QAAQ,CAAC;EACd,CAAC;EAED,MAAME,kBAAkB,GAAIT,EAAU,IAAK;IACzCL,gBAAgB,CAACW,IAAI,IAAIA,IAAI,CAACI,MAAM,CAACX,YAAY,IAAIA,YAAY,CAACC,EAAE,KAAKA,EAAE,CAAC,CAAC;EAC/E,CAAC;EAED,MAAMW,KAAK,GAAG;IACZjB,aAAa;IACbI,eAAe;IACfW,kBAAkB;IAClBb,aAAa;IACbC;EACF,CAAC;EAED,oBAAOT,OAAA,CAACC,UAAU,CAACuB,QAAQ;IAACD,KAAK,EAAEA,KAAM;IAAAnB,QAAA,EAAEA;EAAQ;IAAAqB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAsB,CAAC;AAC5E;AAACvB,EAAA,CA9BeF,WAAW;AAAA0B,EAAA,GAAX1B,WAAW;AAgC3B,OAAO,SAAS2B,MAAMA,CAAA,EAAG;EAAAC,GAAA;EACvB,MAAMC,OAAO,GAAGnC,UAAU,CAACI,UAAU,CAAC;EACtC,IAAI+B,OAAO,KAAK9B,SAAS,EAAE;IACzB,MAAM,IAAI+B,KAAK,CAAC,2CAA2C,CAAC;EAC9D;EACA,OAAOD,OAAO;AAChB;AAACD,GAAA,CANeD,MAAM;AAQtB,SAAS7B,UAAU;AAAG,IAAA4B,EAAA;AAAAK,YAAA,CAAAL,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}