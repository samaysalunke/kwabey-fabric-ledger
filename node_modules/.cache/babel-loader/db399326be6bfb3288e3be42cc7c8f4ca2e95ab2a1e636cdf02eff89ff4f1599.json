{"ast":null,"code":"import{supabase}from'./supabase';export async function createFabricEntry(data){return supabase.from('fabric_entries').insert([data]).select();}export async function createFabricRolls(fabricEntryId,rolls){const rollsData=rolls.map((roll,index)=>({fabric_entry_id:fabricEntryId,batch_number:index+1,roll_value:roll.roll_value,roll_unit:roll.roll_unit}));return supabase.from('fabric_rolls').insert(rollsData);}export async function createRibDetails(fabricEntryId,ribDetails){const ribData={fabric_entry_id:fabricEntryId,total_weight:ribDetails.total_weight,total_rolls:ribDetails.total_rolls};return supabase.from('rib_details').insert([ribData]);}export async function createCompleteFabricEntry(formData){try{// 1. Create fabric entry\nconst{data:fabricEntryData,error:fabricError}=await createFabricEntry(formData.fabricEntry);if(fabricError)throw fabricError;const fabricEntryId=fabricEntryData[0].id;// 2. Create rolls\nconst{error:rollsError}=await createFabricRolls(fabricEntryId,formData.rolls);if(rollsError)throw rollsError;// 3. Create rib details if provided\nif(formData.ribDetails&&(formData.ribDetails.total_weight||formData.ribDetails.total_rolls)){const{error:ribError}=await createRibDetails(fabricEntryId,formData.ribDetails);if(ribError)throw ribError;}// 4. Upload file if provided\nif(formData.file){const fileName=\"\".concat(fabricEntryId,\"_\").concat(Date.now(),\"_\").concat(formData.file.name);const{error:uploadError}=await supabase.storage.from('ftp-documents').upload(fileName,formData.file);if(uploadError)throw uploadError;// Update fabric entry with file URL\nconst{error:updateError}=await supabase.from('fabric_entries').update({ftp_document_url:fileName}).eq('id',fabricEntryId);if(updateError)throw updateError;}return{data:fabricEntryData,error:null};}catch(error){return{data:null,error};}}export async function getFabricEntries(filters){let query=supabase.from('fabric_entries').select('*');if(filters){Object.entries(filters).forEach(_ref=>{let[key,value]=_ref;query=query.eq(key,value);});}return query.order('date_inwarded',{ascending:false});}export async function updateFabricEntry(id,data){return supabase.from('fabric_entries').update(data).eq('id',id);}export async function deleteFabricEntry(id){return supabase.from('fabric_entries').delete().eq('id',id);}","map":{"version":3,"names":["supabase","createFabricEntry","data","from","insert","select","createFabricRolls","fabricEntryId","rolls","rollsData","map","roll","index","fabric_entry_id","batch_number","roll_value","roll_unit","createRibDetails","ribDetails","ribData","total_weight","total_rolls","createCompleteFabricEntry","formData","fabricEntryData","error","fabricError","fabricEntry","id","rollsError","ribError","file","fileName","concat","Date","now","name","uploadError","storage","upload","updateError","update","ftp_document_url","eq","getFabricEntries","filters","query","Object","entries","forEach","_ref","key","value","order","ascending","updateFabricEntry","deleteFabricEntry","delete"],"sources":["/Users/samaysalunke/Documents/everything-hobby/kwabey-fab-check/src/services/fabric.service.ts"],"sourcesContent":["import { supabase } from './supabase';\nimport { FabricEntry, FabricRoll, RibDetails } from '../utils/types';\n\nexport async function createFabricEntry(data: Partial<FabricEntry>) {\n  return supabase.from('fabric_entries').insert([data]).select();\n}\n\nexport async function createFabricRolls(fabricEntryId: string, rolls: Array<{ roll_value: number; roll_unit: string }>) {\n  const rollsData = rolls.map((roll, index) => ({\n    fabric_entry_id: fabricEntryId,\n    batch_number: index + 1,\n    roll_value: roll.roll_value,\n    roll_unit: roll.roll_unit,\n  }));\n  \n  return supabase.from('fabric_rolls').insert(rollsData);\n}\n\nexport async function createRibDetails(fabricEntryId: string, ribDetails: { total_weight?: number; total_rolls?: number }) {\n  const ribData = {\n    fabric_entry_id: fabricEntryId,\n    total_weight: ribDetails.total_weight,\n    total_rolls: ribDetails.total_rolls,\n  };\n  \n  return supabase.from('rib_details').insert([ribData]);\n}\n\nexport async function createCompleteFabricEntry(formData: {\n  fabricEntry: Partial<FabricEntry>;\n  rolls: Array<{ roll_value: number; roll_unit: string }>;\n  ribDetails?: { total_weight?: number; total_rolls?: number };\n  file?: File;\n}) {\n  try {\n    // 1. Create fabric entry\n    const { data: fabricEntryData, error: fabricError } = await createFabricEntry(formData.fabricEntry);\n    if (fabricError) throw fabricError;\n    \n    const fabricEntryId = fabricEntryData[0].id;\n\n    // 2. Create rolls\n    const { error: rollsError } = await createFabricRolls(fabricEntryId, formData.rolls);\n    if (rollsError) throw rollsError;\n\n    // 3. Create rib details if provided\n    if (formData.ribDetails && (formData.ribDetails.total_weight || formData.ribDetails.total_rolls)) {\n      const { error: ribError } = await createRibDetails(fabricEntryId, formData.ribDetails);\n      if (ribError) throw ribError;\n    }\n\n    // 4. Upload file if provided\n    if (formData.file) {\n      const fileName = `${fabricEntryId}_${Date.now()}_${formData.file.name}`;\n      const { error: uploadError } = await supabase.storage\n        .from('ftp-documents')\n        .upload(fileName, formData.file);\n      \n      if (uploadError) throw uploadError;\n\n      // Update fabric entry with file URL\n      const { error: updateError } = await supabase\n        .from('fabric_entries')\n        .update({ ftp_document_url: fileName })\n        .eq('id', fabricEntryId);\n      \n      if (updateError) throw updateError;\n    }\n\n    return { data: fabricEntryData, error: null };\n  } catch (error) {\n    return { data: null, error };\n  }\n}\n\nexport async function getFabricEntries(filters?: Record<string, any>) {\n  let query = supabase.from('fabric_entries').select('*');\n  if (filters) {\n    Object.entries(filters).forEach(([key, value]) => {\n      query = query.eq(key, value);\n    });\n  }\n  return query.order('date_inwarded', { ascending: false });\n}\n\nexport async function updateFabricEntry(id: string, data: Partial<FabricEntry>) {\n  return supabase.from('fabric_entries').update(data).eq('id', id);\n}\n\nexport async function deleteFabricEntry(id: string) {\n  return supabase.from('fabric_entries').delete().eq('id', id);\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}