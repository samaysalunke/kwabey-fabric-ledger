{"ast":null,"code":"import { supabase } from './supabase';\nexport async function createFabricEntry(data) {\n  return supabase.from('fabric_entries').insert([data]).select();\n}\nexport async function createFabricRolls(fabricEntryId, rolls) {\n  const rollsData = rolls.map((roll, index) => ({\n    fabric_entry_id: fabricEntryId,\n    batch_number: index + 1,\n    roll_value: roll.roll_value,\n    roll_unit: roll.roll_unit\n  }));\n  return supabase.from('fabric_rolls').insert(rollsData);\n}\nexport async function createRibDetails(fabricEntryId, ribDetails) {\n  const ribData = {\n    fabric_entry_id: fabricEntryId,\n    total_weight: ribDetails.total_weight,\n    total_rolls: ribDetails.total_rolls\n  };\n  return supabase.from('rib_details').insert([ribData]);\n}\nexport async function createCompleteFabricEntry(formData) {\n  try {\n    // 1. Create fabric entry\n    const {\n      data: fabricEntryData,\n      error: fabricError\n    } = await createFabricEntry(formData.fabricEntry);\n    if (fabricError) throw fabricError;\n    const fabricEntryId = fabricEntryData[0].id;\n\n    // 2. Create rolls\n    const {\n      error: rollsError\n    } = await createFabricRolls(fabricEntryId, formData.rolls);\n    if (rollsError) throw rollsError;\n\n    // 3. Create rib details if provided\n    if (formData.ribDetails && (formData.ribDetails.total_weight || formData.ribDetails.total_rolls)) {\n      const {\n        error: ribError\n      } = await createRibDetails(fabricEntryId, formData.ribDetails);\n      if (ribError) throw ribError;\n    }\n\n    // 4. Upload file if provided\n    if (formData.file) {\n      const fileName = `${fabricEntryId}_${Date.now()}_${formData.file.name}`;\n      const {\n        error: uploadError\n      } = await supabase.storage.from('ftp-documents').upload(fileName, formData.file);\n      if (uploadError) throw uploadError;\n\n      // Update fabric entry with file URL\n      const {\n        error: updateError\n      } = await supabase.from('fabric_entries').update({\n        ftp_document_url: fileName\n      }).eq('id', fabricEntryId);\n      if (updateError) throw updateError;\n    }\n    return {\n      data: fabricEntryData,\n      error: null\n    };\n  } catch (error) {\n    return {\n      data: null,\n      error\n    };\n  }\n}\nexport async function getFabricEntries(filters) {\n  let query = supabase.from('fabric_entries').select('*');\n  if (filters) {\n    Object.entries(filters).forEach(([key, value]) => {\n      query = query.eq(key, value);\n    });\n  }\n  return query.order('date_inwarded', {\n    ascending: false\n  });\n}\nexport async function updateFabricEntry(id, data) {\n  return supabase.from('fabric_entries').update(data).eq('id', id);\n}\nexport async function deleteFabricEntry(id) {\n  return supabase.from('fabric_entries').delete().eq('id', id);\n}","map":{"version":3,"names":["supabase","createFabricEntry","data","from","insert","select","createFabricRolls","fabricEntryId","rolls","rollsData","map","roll","index","fabric_entry_id","batch_number","roll_value","roll_unit","createRibDetails","ribDetails","ribData","total_weight","total_rolls","createCompleteFabricEntry","formData","fabricEntryData","error","fabricError","fabricEntry","id","rollsError","ribError","file","fileName","Date","now","name","uploadError","storage","upload","updateError","update","ftp_document_url","eq","getFabricEntries","filters","query","Object","entries","forEach","key","value","order","ascending","updateFabricEntry","deleteFabricEntry","delete"],"sources":["/Users/samaysalunke/Documents/everything-hobby/kwabey-fab-check/src/services/fabric.service.ts"],"sourcesContent":["import { supabase } from './supabase';\nimport { FabricEntry, FabricRoll, RibDetails } from '../utils/types';\n\nexport async function createFabricEntry(data: Partial<FabricEntry>) {\n  return supabase.from('fabric_entries').insert([data]).select();\n}\n\nexport async function createFabricRolls(fabricEntryId: string, rolls: Array<{ roll_value: number; roll_unit: string }>) {\n  const rollsData = rolls.map((roll, index) => ({\n    fabric_entry_id: fabricEntryId,\n    batch_number: index + 1,\n    roll_value: roll.roll_value,\n    roll_unit: roll.roll_unit,\n  }));\n  \n  return supabase.from('fabric_rolls').insert(rollsData);\n}\n\nexport async function createRibDetails(fabricEntryId: string, ribDetails: { total_weight?: number; total_rolls?: number }) {\n  const ribData = {\n    fabric_entry_id: fabricEntryId,\n    total_weight: ribDetails.total_weight,\n    total_rolls: ribDetails.total_rolls,\n  };\n  \n  return supabase.from('rib_details').insert([ribData]);\n}\n\nexport async function createCompleteFabricEntry(formData: {\n  fabricEntry: Partial<FabricEntry>;\n  rolls: Array<{ roll_value: number; roll_unit: string }>;\n  ribDetails?: { total_weight?: number; total_rolls?: number };\n  file?: File;\n}) {\n  try {\n    // 1. Create fabric entry\n    const { data: fabricEntryData, error: fabricError } = await createFabricEntry(formData.fabricEntry);\n    if (fabricError) throw fabricError;\n    \n    const fabricEntryId = fabricEntryData[0].id;\n\n    // 2. Create rolls\n    const { error: rollsError } = await createFabricRolls(fabricEntryId, formData.rolls);\n    if (rollsError) throw rollsError;\n\n    // 3. Create rib details if provided\n    if (formData.ribDetails && (formData.ribDetails.total_weight || formData.ribDetails.total_rolls)) {\n      const { error: ribError } = await createRibDetails(fabricEntryId, formData.ribDetails);\n      if (ribError) throw ribError;\n    }\n\n    // 4. Upload file if provided\n    if (formData.file) {\n      const fileName = `${fabricEntryId}_${Date.now()}_${formData.file.name}`;\n      const { error: uploadError } = await supabase.storage\n        .from('ftp-documents')\n        .upload(fileName, formData.file);\n      \n      if (uploadError) throw uploadError;\n\n      // Update fabric entry with file URL\n      const { error: updateError } = await supabase\n        .from('fabric_entries')\n        .update({ ftp_document_url: fileName })\n        .eq('id', fabricEntryId);\n      \n      if (updateError) throw updateError;\n    }\n\n    return { data: fabricEntryData, error: null };\n  } catch (error) {\n    return { data: null, error };\n  }\n}\n\nexport async function getFabricEntries(filters?: Record<string, any>) {\n  let query = supabase.from('fabric_entries').select('*');\n  if (filters) {\n    Object.entries(filters).forEach(([key, value]) => {\n      query = query.eq(key, value);\n    });\n  }\n  return query.order('date_inwarded', { ascending: false });\n}\n\nexport async function updateFabricEntry(id: string, data: Partial<FabricEntry>) {\n  return supabase.from('fabric_entries').update(data).eq('id', id);\n}\n\nexport async function deleteFabricEntry(id: string) {\n  return supabase.from('fabric_entries').delete().eq('id', id);\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}